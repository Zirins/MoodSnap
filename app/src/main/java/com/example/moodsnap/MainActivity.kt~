package com.example.moodsnap

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.ImageView
import android.widget.RadioButton
import android.widget.RadioGroup
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch


class MainActivity : AppCompatActivity() {

    private lateinit var imageViewSelfie: ImageView
    private lateinit var takeSelfieButton: Button
    private lateinit var moodGroup: RadioGroup
    private lateinit var editTextNote: EditText
    private lateinit var saveMoodButton: Button
    private lateinit var db: MoodDatabase
    private val REQUEST_IMAGE_CAPTURE = 1
    private val REQUEST_CAMERA_PERMISSION = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        imageViewSelfie = findViewById(R.id.imageViewSelfie)
        takeSelfieButton = findViewById(R.id.btnTakeSelfie)
        moodGroup = findViewById(R.id.radioGroupMood)
        editTextNote = findViewById(R.id.editTextNote)
        saveMoodButton = findViewById(R.id.btnSaveMood)
        db = MoodDatabase.getDatabase(this)

        takeSelfieButton.setOnClickListener {
            checkCameraPermissionAndLaunch()
        }

        saveMoodButton.setOnClickListener {
            val selectedId = moodGroup.checkedRadioButtonId
            if (selectedId == -1) {
                Toast.makeText(this, "Pick a mood, dumbass", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            val selectedMood = findViewById<RadioButton>(selectedId).text.toString()
            val noteText = editTextNote.text.toString()

            val moodEntry = MoodEntry(
                mood = selectedMood,
                note = noteText
            )

            CoroutineScope(Dispatchers.IO).launch {
                db.moodDao().insertMood(moodEntry)
            }

            Toast.makeText(this, "Mood saved for real", Toast.LENGTH_SHORT).show()
        }

        val historyButton = findViewById<Button>(R.id.btnViewHistory)
        historyButton.setOnClickListener {
            startActivity(Intent(this, MoodHistoryActivity::class.java))
        }
    }

    private fun checkCameraPermissionAndLaunch() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.CAMERA),
                REQUEST_CAMERA_PERMISSION
            )
        } else {
            launchCamera()
        }
    }

    private fun launchCamera() {
        val takePictureIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE)
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CAMERA_PERMISSION &&
            grantResults.isNotEmpty() &&
            grantResults[0] == PackageManager.PERMISSION_GRANTED
        ) {
            launchCamera()
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            val imageBitmap = data?.extras?.get("data") as? Bitmap
            imageBitmap?.let {
                imageViewSelfie.setImageBitmap(it)
            }
        }
    }
}
